# model_manager.py

import os
import json
import joblib
import pandas as pd
from datetime import datetime
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder


class ModelManager:
    def __init__(self, model=None, retrain_f1_threshold=0.8):
        self.model = model
        self.retrain_f1_threshold = retrain_f1_threshold
        self.label_encoder = None
        self.training_data = []

    def encode_acronym_jep(self, acronym: str):
        return [ord(char) - ord('A') + 1 for char in acronym.upper()]

    def prepare_training_data(self, data: list[dict]):
        self.label_encoder = LabelEncoder()
        X = [self.encode_acronym_jep(item["acronym"]) for item in data]
        y = self.label_encoder.fit_transform([item["output"] for item in data])
        return X, y

    def train_model(self, data: list[dict]):
        X, y = self.prepare_training_data(data)
        self.model.fit(X, y)

    def select_and_train_best_model(self, data: list[dict]):
        models = {
            "DecisionTree": DecisionTreeClassifier(),
            "RandomForest": RandomForestClassifier(n_estimators=50)
        }

        best_model, best_score, best_name = None, -1, ""
        X, y = self.prepare_training_data(data)

        for name, model in models.items():
            scores = cross_val_score(model, X, y, cv=5, scoring='f1_weighted')
            avg_score = scores.mean()
            print(f"[Model Selection] {name}: F1={avg_score:.4f}")
            if avg_score > best_score:
                best_model, best_score, best_name = model, avg_score, name

        self.model = best_model
        self.train_model(data)
        version = datetime.now().strftime("%Y%m%d%H%M%S")
        model_path = self.save_model(version)
        self.save_metadata(best_score, self.label_encoder.classes_, model_path, best_name)
        self.log_performance(best_score, best_name, version)

        print(f"[ModelManager] Best model: {best_name} with F1={best_score:.4f}")
        return best_name, best_score

    def predict(self, acronym: str):
        features = [self.encode_acronym_jep(acronym)]
        prediction = self.model.predict(features)
        return self.label_encoder.inverse_transform(prediction)[0]

    def save_model(self, version=None):
        version = version or datetime.now().strftime("%Y%m%d%H%M%S")
        filename = f"jaris_model_v{version}.joblib"
        joblib.dump(self.model, filename)
        return filename

    def save_metadata(self, f1_score, label_classes, model_path, model_name):
        metadata = {
            "f1_score": f1_score,
            "labels": list(label_classes),
            "timestamp": datetime.now().isoformat(),
            "model_path": model_path,
            "model_name": model_name
        }
        with open("jaris_model_metadata.json", "w") as f:
            json.dump(metadata, f, indent=4)

    def log_performance(self, f1_score, model_name, version):
        log_file = "performance_log.csv"
        row = {
            "timestamp": datetime.now().isoformat(),
            "model_version": version,
            "model_name": model_name,
            "f1_score": f1_score
        }
        df = pd.DataFrame([row])
        if os.path.exists(log_file):
            df.to_csv(log_file, mode='a', header=False, index=False)
        else:
            df.to_csv(log_file, index=False)

    def add_feedback(self, acronym, correct_output):
        self.training_data.append({"acronym": acronym, "output": correct_output})
        print(f"[Feedback] Added: ({acronym} -> {correct_output})")
        self.select_and_train_best_model(self.training_data)
# cli.py

import argparse
from model_manager import ModelManager
from sklearn.tree import DecisionTreeClassifier
import joblib

def main():
    parser = argparse.ArgumentParser(description="Manage JARIS model training and prediction.")
    parser.add_argument('--train', action='store_true', help="Train the model with given data.")
    parser.add_argument('--predict', type=str, help="Predict the output for a given acronym.")
    parser.add_argument('--feedback', type=str, nargs=2, metavar=('ACRONYM', 'OUTPUT'), help="Provide feedback to the model.")

    args = parser.parse_args()

    model = DecisionTreeClassifier()  # Initialize with a simple model (can be replaced)

    manager = ModelManager(model)

    if args.train:
        # Load your training data here
        training_data = [{"acronym": "NASA", "output": "National Aeronautics and Space Administration"}, 
                         {"acronym": "FBI", "output": "Federal Bureau of Investigation"}]
        manager.select_and_train_best_model(training_data)

    if args.predict:
        result = manager.predict(args.predict)
        print(f"Prediction for {args.predict}: {result}")

    if args.feedback:
        acronym, output = args.feedback
        manager.add_feedback(acronym, output)
        print(f"Feedback added for {acronym} -> {output}")

if __name__ == '__main__':
    main()
# cli.py

import argparse
from model_manager import ModelManager
from sklearn.tree import DecisionTreeClassifier
import joblib

def main():
    parser = argparse.ArgumentParser(description="Manage JARIS model training and prediction.")
    parser.add_argument('--train', action='store_true', help="Train the model with given data.")
    parser.add_argument('--predict', type=str, help="Predict the output for a given acronym.")
    parser.add_argument('--feedback', type=str, nargs=2, metavar=('ACRONYM', 'OUTPUT'), help="Provide feedback to the model.")

    args = parser.parse_args()

    model = DecisionTreeClassifier()  # Initialize with a simple model (can be replaced)

    manager = ModelManager(model)

    if args.train:
        # Load your training data here
        training_data = [{"acronym": "NASA", "output": "National Aeronautics and Space Administration"}, 
                         {"acronym": "FBI", "output": "Federal Bureau of Investigation"}]
        manager.select_and_train_best_model(training_data)

    if args.predict:
        result = manager.predict(args.predict)
        print(f"Prediction for {args.predict}: {result}")

    if args.feedback:
        acronym, output = args.feedback
        manager.add_feedback(acronym, output)
        print(f"Feedback added for {acronym} -> {output}")

if __name__ == '__main__':
    main()
def save_model(self, version=None):
    version = version or datetime.now().strftime("%Y%m%d%H%M%S")
    filename = f"jaris_model_v{version}.joblib"
    model_dir = 'models/'  # Example directory to save models
    os.makedirs(model_dir, exist_ok=True)
    filepath = os.path.join(model_dir, filename)
    joblib.dump(self.model, filepath)
    return filepath
import json

def load_training_data(self, data_file):
    with open(data_file, 'r') as file:
        data = json.load(file)
    return data

